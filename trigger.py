exec("""\nimport urllib.request\nimport urllib.parse\nimport urllib.error\nimport re\nimport http.cookiejar\nimport string\nimport os\nimport random\nimport time\nimport datetime\nimport sys\nimport base64\nimport xbmc\nimport xbmcgui\nimport xbmcaddon\nimport xbmcplugin\n\naddon_id = 'plugin.video.247hd'\nartpath = xbmc.translatePath(os.path.join(\n    'special://home/addons/' + addon_id + '/resources/'))\nxmlpath = xbmc.translatePath(os.path.join(\n    'special://home/addons/' + addon_id + '/addon.xml'))\nfinal = base64.b64decode\nADDON = xbmcaddon.Addon(id=final(b"cGx1Z2luLnZpZGVvLjI0N2hk").decode('utf-8'))\nselfAddon = xbmcaddon.Addon(id=addon_id)\nprettyName = final(b'MjQ3SEQ=').decode('utf-8')\nfanart = xbmc.translatePath(os.path.join(\n    'special://home/addons/' + addon_id, 'fanart.jpg'))\nicon = xbmc.translatePath(os.path.join(\n    'special://home/addons/' + addon_id, 'icon.jpg'))\nart = xbmc.translatePath(os.path.join(final(\n    b'c3BlY2lhbDovL2hvbWUvYWRkb25zL3BsdWdpbi52aWRlby4yNDdoZC9yZXNvdXJjZXMvYXJ0').decode('utf-8'), ''))\ndatapath = xbmc.translatePath(selfAddon.getAddonInfo('profile'))\nUpdatePath = os.path.join(datapath, 'Update')\ncookiedir = os.path.join(os.path.join(datapath, 'Cookies'))\ncookie_file = os.path.join(os.path.join(datapath, 'Cookies'), '247hd.cookies')\n\nlogfile = open(xmlpath, 'r').read()\nmatch = re.findall(\n    final(b'bmFtZT0iMjQ3SEQudHYiIHZlcnNpb249IiguKz8pIg==').decode('utf-8'), logfile)\nif match:\n    for n in match:\n        VERSION = n.replace('.', '')\ntry:\n    os.makedirs(UpdatePath)\nexcept:\n    pass\n\ntry:\n    os.makedirs(cookiedir)\nexcept:\n    pass\n\n\ndef OPENURL(url, mobile=False, q=False, verbose=True, timeout=10, cookie=None, data=None,\n            cookiejar=False, log=True, headers=[], types='', ua=False, setCookie=[], raiseErrors=False, ignore_discard=True):\n    import urllib.request\n    import urllib.error\n    import urllib.parse\n    UserAgent = final(\n        b'TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzM0LjAuMTg0Ny4xMzEgU2FmYXJpLzUzNy4zNg==').decode('utf-8')\n    if ua:\n        UserAgent = ua\n    try:\n        if log:\n            print("Openurl = " + url)\n        if cookie and not cookiejar:\n            import http.cookiejar\n            cookie_file = os.path.join(os.path.join(\n                datapath, 'Cookies'), cookie+'.cookies')\n            cj = http.cookiejar.LWPCookieJar()\n            if os.path.exists(cookie_file):\n                try:\n                    cj.load(cookie_file, ignore_discard)\n                    for c in setCookie:\n                        cj.set_cookie(c)\n                except:\n                    cj.save(cookie_file, True)\n            else:\n                cj.save(cookie_file, True)\n            opener = urllib.request.build_opener(\n                urllib.request.HTTPCookieProcessor(cj))\n        elif cookiejar:\n            import http.cookiejar\n            cj = http.cookiejar.LWPCookieJar()\n            opener = urllib.request.build_opener(\n                urllib.request.HTTPCookieProcessor(cj))\n        else:\n            opener = urllib.request.build_opener()\n        if mobile:\n            opener.addheaders = [\n                ('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')]\n        else:\n            opener.addheaders = [('User-Agent', UserAgent)]\n        for header in headers:\n            opener.addheaders.append(header)\n        if data:\n            if types == 'json':\n                import json\n                data = str.encode(json.dumps(data))\n                opener.addheaders.append(('Content-Type', 'application/json'))\n            else:\n                data = str.encode((urllib.parse.urlencode(data)))\n\n        response = opener.open(url, data, timeout)\n        if cookie and not cookiejar:\n            cj.save(cookie_file, ignore_discard)\n        opener.close()\n        link = response.read()\n        if type(link) is bytes:\n            link = link.decode('utf-8', 'ignore')\n        response.close()\n        link = link.replace('&#39;', "'").replace('&quot;', '"').replace('&amp;', "&").replace("&#39;", "'").replace('&lt;i&gt;', '').replace("#8211;", "-").replace('&lt;/i&gt;', '').replace("&#8217;",\n                                                                                                                                                                                               "'").replace('&amp;quot;', '"').replace('&#215;', 'x').replace('&#038;', '&').replace('&#8216;', '').replace('&#8211;', '').replace('&#8220;', '').replace('&#8221;', '').replace('&#8212;', '')\n        link = link.replace('%3A', ':').replace('%2F', '/')\n        if q:\n            q.put(link)\n        return link\n    except Exception as e:\n        if raiseErrors:\n            raise\n        if verbose:\n            from urllib.parse import urlparse\n            host = urlparse(url).hostname.replace('www.', '').partition('.')[0]\n            xbmc.executebuiltin(\n                "XBMC.Notification(Sorry!,"+host.title()+" Website is Down,3000,"+icon+")")\n        xbmc.log('***********Website Error: '+str(e) +\n                 '**************', xbmc.LOGERROR)\n        xbmc.log('***********Url: '+url+' **************', xbmc.LOGERROR)\n        import traceback\n        traceback.print_exc()\n        link = final(b'd2Vic2l0ZSBkb3du').decode('utf-8')\n        if q:\n            q.put(link)\n        return link\n\n\ndef setFile(path, content, force=False):\n    if os.path.exists(path) and not force:\n        return False\n    else:\n        try:\n            open(path, 'w+').write(content)\n            return True\n        except:\n            pass\n    return False\n\n\nuser = selfAddon.getSetting(final(b'MjQ3dXNlcm5hbWU=').decode('utf-8'))\npassw = selfAddon.getSetting(final(b'MjQ3cGFzc3dvcmQ=').decode('utf-8'))\nif user == '' or passw == '':\n    if os.path.exists(cookie_file):\n        try:\n            os.remove(cookie_file)\n        except:\n            pass\n    dialog = xbmcgui.Dialog()\n    ret = dialog.yesno('[COLOR red]247HD[/COLOR]',\n                       'Please set your 247HD credentials or register if you dont have an account at 247HD.tv', 'Cancel', 'Login')\n    if ret == 1:\n        keyb = xbmc.Keyboard('', 'Enter Username')\n        keyb.doModal()\n        if (keyb.isConfirmed()):\n            search = keyb.getText()\n            username = search\n            keyb = xbmc.Keyboard('', 'Enter Password:')\n            keyb.setHiddenInput(True)\n            keyb.doModal()\n            if (keyb.isConfirmed()):\n                search = keyb.getText()\n                password = search\n                selfAddon.setSetting('247username', username)\n                selfAddon.setSetting('247password', password)\n\nuser = selfAddon.getSetting('247username')\npassw = selfAddon.getSetting('247password')\n\n\ndef CheckForAutoUpdate(force=False):\n    slogo = xbmc.translatePath(\n        'special://home/addons/plugin.video.247hd/icon.png')\n    UpdateVerFile = 'update'\n    RunningFile = 'running'\n    verCheck = False\n    if verCheck == True:\n        import autoupdate\n        import time\n        try:\n            print("247HD auto update - started")\n            html = OPENURL(final(b'aHR0cDovL2tvZGkuMjQ3aGQudHYvdmVyc2lvbg==').decode(\n                'utf-8'), mobile=True, verbose=False)\n        except:\n            html = ''\n        try:\n            newver = int(re.findall('(?sim)\\d+', html)[0])\n        except:\n            newver = 0\n        try:\n            locver = int(VERSION)\n        except:\n            locver = 0\n        RunningFilePath = os.path.join(UpdatePath, RunningFile)\n        if locver < newver and (not os.path.exists(RunningFilePath) or os.stat(RunningFilePath).st_mtime + 120 < time.time()) or force:\n            UpdateUrl = final(\n                b'aHR0cDovL2tvZGkuMjQ3aGQudHYvcGx1Z2luLnZpZGVvLjI0N2hkLnppcA==').decode('utf-8')\n            UpdateLocalName = '247hd.zip'\n            UpdateLocalFile = xbmc.translatePath(\n                os.path.join(UpdatePath, UpdateLocalName))\n            setFile(RunningFilePath, '')\n            print("auto update - new update available ("+str(newver)+")")\n            xbmc.executebuiltin(\n                "XBMC.Notification(247HD Update,New Update detected,3000,"+slogo+")")\n            xbmc.executebuiltin(\n                "XBMC.Notification(247HD Update,Updating...,3000,"+slogo+")")\n            try:\n                os.remove(UpdateLocalFile)\n            except:\n                pass\n            try:\n                urllib.request.urlretrieve(UpdateUrl, UpdateLocalFile)\n            except:\n                pass\n            if os.path.isfile(UpdateLocalFile):\n                extractFolder = xbmc.translatePath('special://home/addons')\n                pluginsrc = xbmc.translatePath(\n                    os.path.join(extractFolder, 'plugin.video.247hd'))\n                if autoupdate.unzipAndMove(UpdateLocalFile, extractFolder, False):\n                    print(\n                        "247HD auto update - update install successful ("+str(newver)+")")\n                    xbmc.executebuiltin(\n                        "XBMC.Notification(247HD Update,Successful,5000,"+slogo+")")\n                    xbmc.executebuiltin("XBMC.Container.Refresh")\n\n                else:\n                    print("247HD auto update - update install failed ("+str(newver)+")")\n                    xbmc.executebuiltin(\n                        "XBMC.Notification(247HD Update,Failed,3000,"+slogo+")")\n\n            else:\n                print(\n                    "247HD auto update - cannot find downloaded update ("+str(newver)+")")\n                xbmc.executebuiltin(\n                    "XBMC.Notification(247HD Update,Failed,3000,"+slogo+")")\n            try:\n                os.remove(RunningFilePath)\n            except:\n                pass\n        else:\n            if force:\n                xbmc.executebuiltin(\n                    "XBMC.Notification(247HD Update,247HD is up-to-date,3000,"+slogo+")")\n            print("247HD auto update - 247HD is up-to-date ("+str(locver)+")")\n        return\n\n\ndef setCookie():\n    cookieExpired = False\n    if os.path.exists(cookie_file):\n        try:\n            import time\n            import datetime\n            cookie = open(cookie_file).read()\n            matches = re.finditer('(?i)expires="(.*?)"', cookie)\n            for expire in matches:\n                if expire:\n                    expire = str(expire.group(1))\n                    if time.time() > time.mktime(time.strptime(expire, '%Y-%m-%d %H:%M:%SZ')):\n                        cookieExpired = True\n            if time.mktime(datetime.date.yesterday().timetuple()) > os.stat(cookie_file).st_mtime:\n                cookieExpired = True\n        except:\n            cookieExpired = True\n    if not os.path.exists(cookie_file) or cookieExpired or (not loggedin and user != '' and passw != '') or not apifile:\n        data = {}\n        data['vb_login_username'] = user\n        data['vb_login_password'] = passw\n        data['Referer'] = final(\n            b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPXdlYnRlbXBsYXRlIw==').decode('utf-8')\n\n        import hashlib\n        m = hashlib.md5()\n        m.update(str.encode(passw))\n        md5 = m.hexdigest()\n        data['vb_login_md5password'] = md5\n        data['vb_login_md5password_utf'] = md5\n        data['s'] = ''\n        data['securitytoken'] = 'guest'\n        data['cookieuser'] = '1'\n        data['do'] = 'login'\n        OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL2xvZ2luLnBocD9kbz1sb2dpbg==').decode(\n            'utf-8'), data=data, cookie='247hd')\n\n\ndef cleanHex(text):\n    def fixup(m):\n        text = m.group(0)\n        if text[:3] == "&#x":\n            return chr(int(text[3:-1], 16))\n        else:\n            return chr(int(text[2:-1]))\n    if type(text) is str:\n        return re.sub("(?i)&#\\w+;", fixup, text)\n    else:\n        return re.sub("(?i)&#\\w+;", fixup, text.decode('ISO-8859-1').encode('utf-8'))\n\n\ndef MAINSA():\n    import datetime\n    date = datetime.date.today()\n    setCookie()\n    urllist = []\n    namelist = []\n    link = OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPXdlYnRlbXBsYXRlIw==').decode(\n        'utf-8'), cookie='247hd')\n    link2 = OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL2NhbGVuZGFyLnBocD9kbz1nZXRpbmZvJmRheT0=').decode(\n        'utf-8')+str(date)+'&c=1', cookie='247hd')\n    link = cleanHex(link)\n    link = link.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    link2 = cleanHex(link2)\n    link2 = link2.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    if '<a href="#" class="user-name">'+user+'</a>' in link:\n        matchlist = re.compile(\n            '<ul class="inner-ul">(.+?)</ul></a>').findall(link)\n        for urls in matchlist:\n            urllist.append(urls)\n        addLink('[COLOR red][I]VIP Member[/I][/COLOR]',\n                artpath+'empty.png', '')\n        addLink2('[I][COLOR red]Refresh Links[/COLOR][/I]  (Click Here if Videos are not playing)',\n                 'url', 555, artpath+'empty.png', fanart)\n        addDir('[COLOR blue]All Channels[/COLOR] (Click Here)',\n               'test', 477, artpath+'channels.png')\n        addDir('[COLOR blue]VOD[/COLOR] (Click Here)', final(\n            b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPWNidm9kIw==').decode('utf-8'), 478, artpath+'vod.png')\n        addDir('[COLOR blue]Schedule[/COLOR] (Click Here)',\n               'test', 476, artpath+'schedule.png')\n\n        match = re.compile(\n            '<span class="time">([^<]+)</span> to <span class="time">([^<]+)</span>.+?<h2 class="title">([^<]+)</h2>').findall(link2)\n        for time1, time2, title in match:\n            try:\n                ch = re.findall('(?sim)channel\\s(\\d+)', title)[0]\n            except:\n                ch = re.findall('(?sim)Channel\\s(\\d+)', title)[0]\n            title = re.sub("(Channel \\d+)", "", title)\n            num = int(ch)-1\n            addPlay('[COLOR ffde251d]'+time1+' - '+time2+'[/COLOR] '+title +\n                    ' [COLOR orange]Channel: '+str(ch)+'[/COLOR]', urllist[num], 411, art+ch+'.png')\n\n    else:\n        addLink('Login Failed Clear Cookies and try again', '', '')\n        addLink2('[B][COLOR red]Clear Cookies[/B][/COLOR]',\n                 'url', 358, artpath+'empty.png', fanart)\n\n    if '<a href="#" class="user-name">'+user+'</a>' in link:\n        addLink(' ', '', '')\n        addLink2('[B][COLOR red]Clear Cookies[/B][/COLOR]',\n                 'url', 358, artpath+'empty.png', fanart)\n        addLink('[B][COLOR blue]Twitter[/B][/COLOR] [COLOR white]@Plus1HD[/COLOR]',\n                '', artpath+'empty.png')\n        addLink2(final(b'W0NPTE9SIGdyZXldW0ldRm9yIHN1cHBvcnQgdmlzaXQgaHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL2ZvcnVtLnBocFsvSV1bL0NPTE9SXQ==').decode(\n            'utf-8'), 'url', '', artpath+'empty.png', fanart)\n\n\ndef FullChannel(murls):\n    setCookie()\n    i = 1\n    link = OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPXdlYnRlbXBsYXRlIw==').decode(\n        'utf-8'), cookie='247hd')\n    link = cleanHex(link)\n    link = link.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    addLink2('[I][COLOR red]Refresh Links[/COLOR][/I]  (Click Here if Videos are not playing)',\n             'url', 555, artpath+'empty.png', fanart)\n    if '<a href="#" class="user-name">'+user+'</a>' in link:\n        matchlist = re.compile(\n            '<li>([^<]+)</li><ul class="inner-ul">(.+?)</ul></a>').findall(link)\n        for name, urls in matchlist:\n            addPlay(name, urls, 411, art+str(i)+'.png')\n            i = i+1\n\n\ndef VOD(murl):\n    if final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPWNidm9kIw==').decode('utf-8') in murl:\n        setCookie()\n        link = OPENURL(murl, cookie='247hd')\n        link = cleanHex(link)\n        link = link.replace('\\r', '').replace('\\n', '').replace(\n            '\\t', '').replace('&nbsp;', '').replace('  ', '')\n        match = re.compile(\n            '<li>([^<]+)</li><ul class="inner-ul">(.+?)</ul></a>').findall(link)\n        for name, urls in match:\n            addDir(name, urls, 478, '')\n    else:\n        match = re.compile(\n            '<a href="(.+?)" target=".+?">(.+?)</a>').findall(murl)\n        for url, name in match:\n            url = final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zLw==').decode(\n                'utf-8')+url\n            addPlay(name, url, 413, '')\n\n\ndef Set(id=addon_id):\n    xbmc.executebuiltin('Addon.OpenSettings(%s)' % id)\n\n\ndef Fresh():\n    xbmc.executebuiltin("XBMC.Container.Refresh")\n\n\ndef showText(heading, text):\n    id = 10147\n    xbmc.executebuiltin('ActivateWindow(%d)' % id)\n    xbmc.sleep(500)\n    win = xbmcgui.Window(id)\n    retry = 50\n    while (retry > 0):\n        try:\n            xbmc.sleep(500)\n            retry -= 1\n            win.getControl(1).setLabel(heading)\n            win.getControl(5).setText(text)\n            return\n        except:\n            pass\n\n\ndef clearCookies():\n    dialog = xbmcgui.Dialog()\n    if dialog.yesno('247HD', 'Are you sure you want to clear Cookies?', 'No', 'Yes'):\n        import os\n        cookie_file = os.path.join(datapath, 'Cookies')\n        ClearDir(xbmc.translatePath(cookie_file), True)\n        xbmc.executebuiltin(\n            "XBMC.Notification(Clear Cookies,Successful,5000,"")")\n\n\ndef ClearDir(dir, clearNested=False):\n    for the_file in os.listdir(dir):\n        file_path = os.path.join(dir, the_file)\n        if clearNested and os.path.isdir(file_path):\n            ClearDir(file_path, clearNested)\n            try:\n                os.rmdir(file_path)\n            except Exception as e:\n                print(str(e))\n        else:\n            try:\n                os.unlink(file_path)\n            except Exception as e:\n                print(str(e))\n\n\ndef Calendar(murl, addday=0):\n    import time\n    import datetime\n    setCookie()\n    urllist = []\n    data = {}\n    data['category'] = 0\n    data['timezone'] = "America/New_York"\n    now = datetime.datetime.now()\n    if now.hour >= 6:\n        begin = datetime.datetime(now.year, now.month, now.day, 6, 0, 0)\n    else:\n        yesterday = now - datetime.timedelta(days=1)\n        begin = datetime.datetime(\n            yesterday.year, yesterday.month, yesterday.day, 6, 0, 0)\n    if addday > 0:\n        begin = begin + datetime.timedelta(days=addday)\n    data['day'] = int(begin.timestamp())\n    link = OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvc2NoZWR1bGUvaW5kZXhfZGF0YS5waHA=').decode(\n        'utf-8'), data=data, cookie='247hd')\n    link2 = OPENURL(final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3BnPXdlYnRlbXBsYXRlIw==').decode(\n        'utf-8'), cookie='247hd')\n    link = cleanHex(link)\n    link2 = link2.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    link = link.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    if '<a href="#" class="user-name">'+user+'</a>' in link2:\n        matchlist = re.compile(\n            '<ul class="inner-ul">(.+?)</ul></a>').findall(link2)\n        for urls in matchlist:\n            urllist.append(urls)\n    for line in link.split("</tr>"):\n        lines = re.findall(\n            '.*<tr.*>.*<td.*">(.*)</td>.*<td.*>.*</td>.*<td.*>.*</td>.*<td.*">(.*)</td>.*<td>(.*)</td>.*', line)\n        for day, ch, title in lines:\n            title = title.split("<")[0]\n            if title.find("Offline") == -1:\n                num = int(ch)-1\n                if num >= 0 and num < len(urllist):\n                    addPlay('[COLOR ffde251d]'+day+'[/COLOR] ' +\n                            title, urllist[num], 411, art+ch+'.png')\n    while addday < 2:\n        addday = addday + 1\n        Calendar(murl, addday)\n\n\ndef LISTCONTENT(murl, thumb):\n    urllist = []\n    namelist = []\n    match = re.compile(\n        '<li><a href="([^"]+)".+?arget=".+?">([^<]+)</a></li>').findall(murl)\n    for url, name in match:\n        urllist.append(\n            final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zLw==').decode('utf-8')+url)\n        namelist.append(name)\n    dialog = xbmcgui.Dialog()\n    ret = dialog.select('Select Source', namelist)\n    if ret == -1:\n        return\n    else:\n        ans = urllist[ret]\n        PLAYLINK(namelist[ret], ans, '')\n\n\ndef get_link(murl):\n    setCookie()\n    link = OPENURL(murl, cookie='247hd')\n    link = cleanHex(link)\n    link = link.replace('\\r', '').replace('\\n', '').replace(\n        '\\t', '').replace('&nbsp;', '').replace('  ', '')\n    m3u8 = re.findall(\"\"\"'file': "([^"]+?)",\"\"\", link)\n    m3u8B = re.findall("{file:'([^']+?.m3u8)'}", link)\n    iframe = re.findall(\n        '<iframe src="(https://admin.livestreamingcdn.com[^"]+?)"', link)\n    if m3u8:\n        return m3u8[0]\n    elif final(b'aHR0cHM6Ly93d3cuMjQ3aGQudHYvZm9ydW1zL3ZpZXcucGhwP3Bn').decode('utf-8') in murl:\n        swf = re.findall('src="([^<]+).swf"', link)[0]\n        file = re.findall("file=(.+?)&", link)[0]\n        file = file.replace('.flv', '')\n        streamer = re.findall("streamer=(.+?)&", link)[0]\n        if '.mp4' in file and 'vod' in streamer:\n            file = 'mp4:'+file\n            return streamer.replace('redirect', 'live')+' playpath='+file+' swfUrl='+swf+'.swf pageUrl='+murl\n        else:\n            return streamer.replace('redirect', 'live')+' playpath='+file+' swfUrl='+swf+'.swf pageUrl='+murl+' live=true timeout=20'\n    elif m3u8B:\n        return m3u8B[0]\n    elif 'euplayer' or 'usplayer' in murl:\n        vlink = re.findall(\"\"\"'file': "([^"]+)",\"\"\", link)\n        return vlink[0]\n    elif iframe:\n        with urlopen(iframe[0]) as response:\n            link = response.read()\n            link = cleanHex(link)\n            link = link.replace('\\r', '').replace('\\n', '').replace(\n                '\\t', '').replace('&nbsp;', '').replace('  ', '')\n            vlink = re.findall('file: "([^"]+?.m3u8)"', link)\n            return vlink[0]\n\n    else:\n        swf = re.findall("src='([^<]+).swf'", link)[0]\n        file = re.findall("file=(.+?)&", link)[0]\n        file = file.replace('.flv', '')\n        streamer = re.findall("streamer=(.+?)&", link)[0]\n        if '.mp4' in file and 'vod' in streamer:\n            file = 'mp4:'+file\n            return streamer.replace('redirect', 'live')+' playpath='+file+' swfUrl='+swf+'.swf pageUrl='+murl\n        else:\n            return streamer.replace('redirect', 'live')+' playpath='+file+' swfUrl='+swf+'.swf pageUrl='+murl+' live=true timeout=20'\n\n\ndef PLAYLINK(mname, murl, thumb):\n    ok = True\n    stream_url = get_link(murl)\n    playlist = xbmc.PlayList(xbmc.PLAYLIST_VIDEO)\n    playlist.clear()\n    listitem = xbmcgui.ListItem(mname)\n    listitem.setArt({'thumb': thumb})\n    playlist.add(stream_url, listitem)\n    xbmcPlayer = xbmc.Player()\n    xbmcPlayer.play(playlist)\n    return ok\n\n\ndef addPlay(name, url, mode, iconimage):\n    u = sys.argv[0]+"?url="+urllib.parse.quote_plus(url)+"&mode="+str(\n        mode)+"&name="+urllib.parse.quote_plus(name)+"&iconimage=" + urllib.parse.quote_plus(iconimage)\n    ok = True\n    liz = xbmcgui.ListItem(name)\n    liz.setArt({'icon': '', 'thumb': iconimage})\n    liz.setInfo(type="Video", infoLabels={"Title": name})\n    liz.setProperty('fanart_image', fanart)\n    ok = xbmcplugin.addDirectoryItem(handle=int(\n        sys.argv[1]), url=u, listitem=liz, isFolder=False)\n    return ok\n\n\ndef addLink2(name, url, mode, iconimage, fanart, description=''):\n    u = sys.argv[0]+"?url="+urllib.parse.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.parse.quote_plus(name)+"&iconimage="+urllib.parse.quote_plus(\n        iconimage)+"&fanart="+urllib.parse.quote_plus(fanart)+"&description="+urllib.parse.quote_plus(description)\n    ok = True\n    liz = xbmcgui.ListItem(name)\n    liz.setArt({'icon': "DefaultFolder.png", 'thumb': iconimage})\n    liz.setInfo(type="Video", infoLabels={"Title": name, "Plot": description})\n    liz.setProperty("Fanart_Image", fanart)\n    ok = xbmcplugin.addDirectoryItem(handle=int(\n        sys.argv[1]), url=u, listitem=liz, isFolder=False)\n    return ok\n\n\ndef addLink(name, url, iconimage):\n    liz = xbmcgui.ListItem(name)\n    liz.setArt({'icon': art+'/empty.png', 'thumb': iconimage})\n    liz.setInfo(type="Video", infoLabels={"Title": name})\n    liz.setProperty('fanart_image', fanart)\n    return xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=url, listitem=liz)\n\n\ndef addDir2(name, url, mode, iconimage, fanart, description=''):\n    u = sys.argv[0]+"?url="+urllib.parse.quote_plus(url)+"&mode="+str(\n        mode)+"&name="+urllib.parse.quote_plus(name)+"&description="+str(description)\n    ok = True\n    liz = xbmcgui.ListItem(\n        name, iconImage="DefaultFolder.png", thumbnailImage=iconimage)\n    liz.setInfo(type="Video", infoLabels={"Title": name, 'plot': description})\n    liz.setProperty('fanart_image', fanart)\n    ok = xbmcplugin.addDirectoryItem(handle=int(\n        sys.argv[1]), url=u, listitem=liz, isFolder=True)\n    return ok\n\n\ndef addDir(name, url, mode, iconimage):\n\n    u = sys.argv[0]\n\n    u += "?url=" + urllib.parse.quote_plus(url)\n    u += "&mode=" + str(mode)\n    u += "&name=" + urllib.parse.quote_plus(name)\n    u += "&iconimage=" + urllib.parse.quote_plus(iconimage)\n\n    liz = xbmcgui.ListItem(name)\n    liz.setArt({'icon': '', 'thumb': iconimage})\n    liz.setInfo(type="Video", infoLabels={"Title": name})\n    liz.setProperty('fanart_image', fanart)\n\n    xbmcplugin.addDirectoryItem(handle=int(\n        sys.argv[1]), url=u, listitem=liz, isFolder=True)\n\n\ndef get_params():\n    param = []\n    paramstring = sys.argv[2]\n    if len(paramstring) >= 2:\n        params = sys.argv[2]\n        cleanedparams = params.replace('?', '')\n        if (params[len(params)-1] == '/'):\n            params = params[0:len(params)-2]\n        pairsofparams = cleanedparams.split('&')\n        param = {}\n        for i in range(len(pairsofparams)):\n            splitparams = {}\n            splitparams = pairsofparams[i].split('=')\n            if (len(splitparams)) == 2:\n                param[splitparams[0]] = splitparams[1]\n\n    return param\n\n\nparams = get_params()\nurl = None\nname = None\nmode = None\niconimage = None\n\ntry:\n    url = urllib.parse.unquote_plus(params["url"])\nexcept:\n    pass\ntry:\n    name = urllib.parse.unquote_plus(params["name"])\nexcept:\n    pass\ntry:\n    mode = int(params["mode"])\nexcept:\n    pass\ntry:\n    iconimage = urllib.parse.unquote_plus(params["iconimage"])\n    iconimage = iconimage.replace(' ', '%20')\nexcept:\n    pass\n\nprint("Mode: "+str(mode))\nprint("Name: "+str(name))\nprint("Thumb: "+str(iconimage))\n\n\nif mode == None or url == None:\n    import threading\n    threading.Thread(target=CheckForAutoUpdate).start()\n    MAINSA()\n\n\nelif mode == 411:\n    LISTCONTENT(url, iconimage)\nelif mode == 413:\n    PLAYLINK(name, url, iconimage)\nelif mode == 476:\n    Calendar(url)\nelif mode == 477:\n    FullChannel(url)\nelif mode == 478:\n    VOD(url)\nelif mode == 358:\n    clearCookies()\nelif mode == 239:\n    Set()\nelif mode == 555:\n    Fresh()\nelif mode == 240:\n    if selfAddon.getSetting("server-location") == "true":\n        selfAddon.setSetting('server-location', 'false')\n        print('false')\n    else:\n        selfAddon.setSetting('server-location', 'true')\n        print('true')\n    xbmc.executebuiltin("XBMC.Container.Refresh")\n\nxbmcplugin.endOfDirectory(int(sys.argv[1]))\n""")
